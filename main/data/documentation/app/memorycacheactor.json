{"variants":[{"paths":["\/documentation\/app\/memorycacheactor"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MemoryCacheActor","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"Decodable","kind":"typeIdentifier","preciseIdentifier":"s:Se"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Encodable","preciseIdentifier":"s:SE"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Equatable","preciseIdentifier":"s:SQ"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:s8SendableP","text":"Sendable","kind":"typeIdentifier"}],"languages":["swift"]}]},{"kind":"content","content":[{"level":2,"type":"heading","text":"Overview","anchor":"overview"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Holds a memory cache of generic data, keyed by "},{"type":"codeVoice","code":"owner"},{"type":"text","text":", "},{"type":"codeVoice","code":"repo"},{"type":"text","text":", and "},{"type":"codeVoice","code":"version"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Ensures that for a specific cache key, we only execute one ","type":"text"},{"code":"DataLoader","type":"codeVoice"},{"text":" at a time.","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"text":"Since ","type":"text"},{"code":"DataLoader","type":"codeVoice"},{"text":" may mutate the disk cache, then this eliminates the race condition where two requests to the same owner\/repo\/version","type":"text"},{"text":" ","type":"text"},{"text":"could be attempting to read and write to the disk cache simultaneously. So if we get two simultaneous requests","type":"text"},{"text":" ","type":"text"},{"text":"with same ","type":"text"},{"code":"owner","type":"codeVoice"},{"text":", ","type":"text"},{"code":"repo","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"version","type":"codeVoice"},{"text":" for both requests, then the second one must will wait on the first one","type":"text"},{"text":" ","type":"text"},{"text":"to complete before it completes.","type":"text"}],"type":"paragraph"}]}],"topicSections":[{"identifiers":["doc:\/\/App\/documentation\/App\/MemoryCacheActor\/init(dataLoader:)"],"generated":true,"title":"Initializers","anchor":"Initializers"},{"identifiers":["doc:\/\/App\/documentation\/App\/MemoryCacheActor\/loadData(owner:repo:version:fileIO:database:logger:)"],"generated":true,"title":"Instance Methods","anchor":"Instance-Methods"},{"identifiers":["doc:\/\/App\/documentation\/App\/MemoryCacheActor\/DataLoader"],"generated":true,"title":"Type Aliases","anchor":"Type-Aliases"},{"identifiers":["doc:\/\/App\/documentation\/App\/MemoryCacheActor\/Actor-Implementations"],"generated":true,"title":"Default Implementations","anchor":"Default-Implementations"}],"identifier":{"url":"doc:\/\/App\/documentation\/App\/MemoryCacheActor","interfaceLanguage":"swift"},"sections":[],"hierarchy":{"paths":[["doc:\/\/App\/documentation\/App"]]},"abstract":[{"type":"text","text":"This actor accomplishes two purposes:"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"relationshipsSections":[{"kind":"relationships","identifiers":["doc:\/\/App\/s8SendableP","doc:\/\/App\/ScA"],"title":"Conforms To","type":"conformsTo"}],"kind":"symbol","metadata":{"externalID":"s:3App16MemoryCacheActorC","modules":[{"name":"App"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"MemoryCacheActor"}],"symbolKind":"class","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"MemoryCacheActor"}],"roleHeading":"Class","title":"MemoryCacheActor"},"references":{"doc://App/s8SendableP":{"type":"unresolvable","identifier":"doc:\/\/App\/s8SendableP","title":"Swift.Sendable"},"doc://App/documentation/App/MemoryCacheActor":{"title":"MemoryCacheActor","identifier":"doc:\/\/App\/documentation\/App\/MemoryCacheActor","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"MemoryCacheActor"}],"abstract":[{"text":"This actor accomplishes two purposes:","type":"text"}],"type":"topic","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"MemoryCacheActor"}],"url":"\/documentation\/app\/memorycacheactor"},"doc://App/documentation/App/MemoryCacheActor/Actor-Implementations":{"kind":"article","type":"topic","role":"collectionGroup","url":"\/documentation\/app\/memorycacheactor\/actor-implementations","identifier":"doc:\/\/App\/documentation\/App\/MemoryCacheActor\/Actor-Implementations","abstract":[],"title":"Actor Implementations"},"doc://App/documentation/App/MemoryCacheActor/loadData(owner:repo:version:fileIO:database:logger:)":{"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"loadData"},{"kind":"text","text":"("},{"kind":"externalParam","text":"owner"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"externalParam","text":"repo"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"externalParam","text":"version"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Version","preciseIdentifier":"s:12APIUtilities7VersionV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileIO"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"FileIO","preciseIdentifier":"s:5Vapor6FileIOV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"database"},{"kind":"text","text":": any "},{"kind":"typeIdentifier","text":"Database","preciseIdentifier":"s:9FluentKit8DatabaseP"},{"kind":"text","text":", "},{"kind":"externalParam","text":"logger"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Logger","preciseIdentifier":"s:7Logging6LoggerV"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}],"identifier":"doc:\/\/App\/documentation\/App\/MemoryCacheActor\/loadData(owner:repo:version:fileIO:database:logger:)","abstract":[],"title":"loadData(owner:repo:version:fileIO:database:logger:)","url":"\/documentation\/app\/memorycacheactor\/loaddata(owner:repo:version:fileio:database:logger:)","kind":"symbol"},"doc://App/documentation/App":{"title":"App","url":"\/documentation\/app","role":"collection","kind":"symbol","identifier":"doc:\/\/App\/documentation\/App","abstract":[{"type":"text","text":"The Swift Package Registry Service is a Vapor-based web service which implements the Swift Package Registry Service Specification by proxying and caching the Github API."}],"type":"topic"},"doc://App/ScA":{"title":"_Concurrency.Actor","identifier":"doc:\/\/App\/ScA","type":"unresolvable"},"doc://App/documentation/App/MemoryCacheActor/init(dataLoader:)":{"url":"\/documentation\/app\/memorycacheactor\/init(dataloader:)","identifier":"doc:\/\/App\/documentation\/App\/MemoryCacheActor\/init(dataLoader:)","abstract":[],"title":"init(dataLoader:)","role":"symbol","kind":"symbol","type":"topic","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"dataLoader","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"MemoryCacheActor","kind":"typeIdentifier","preciseIdentifier":"s:3App16MemoryCacheActorC"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">.","kind":"text"},{"text":"DataLoader","kind":"typeIdentifier","preciseIdentifier":"s:3App16MemoryCacheActorC10DataLoadera"},{"text":")","kind":"text"}]},"doc://App/documentation/App/MemoryCacheActor/DataLoader":{"kind":"symbol","identifier":"doc:\/\/App\/documentation\/App\/MemoryCacheActor\/DataLoader","type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DataLoader","kind":"identifier"}],"url":"\/documentation\/app\/memorycacheactor\/dataloader","navigatorTitle":[{"text":"DataLoader","kind":"identifier"}],"abstract":[],"role":"symbol","title":"MemoryCacheActor.DataLoader"}}}